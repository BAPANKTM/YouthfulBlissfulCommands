
Create a withdrawal history feature that opens in the existing Floater component when the user clicks a "History" button. The history view should display past withdrawal transactions with filtering capabilities while maintaining the current design system.

## Functional Requirements

1. Add a "History" button alongside existing action buttons that opens the Floater/modal component
2. Display withdrawal records from the provided JSON data (to be stored in `/public/data/withdrawal.json`)
3. Include a status filter toggle to switch between All/Complete/Failed/Processing views
4. Show withdrawal method, amount, and status for each entry
5. Format dates in a user-friendly way (e.g., "Mar 10, 2025")
6. Include appropriate handling for empty states when no records match the current filter

## Technical Guidelines

- **Reuse Existing Components**: 
  - Use the existing Floater component for the modal display
  - Match the existing action button style for the History button
  - Leverage existing CSS classes when possible

- **Data Management**:
  - Create a utility function to fetch withdrawal data
  - Implement client-side filtering based on status selection
  - Sort records by date (newest first)

- **UI Elements**:
  - Create a simple toggle/slider component for status filtering that matches the app's design
  - Style withdrawal entries consistent with existing card components
  - Use appropriate icons from the existing set for status indicators

- **Code Quality**:
  - Keep the implementation minimal and focused
  - Avoid creating duplicate styling
  - Ensure responsive behavior on all screen sizes

## Visual Guidelines

- The History button should match other action buttons in style and placement
- Status filter should be subtle but clear (possibly a pill-style toggle at the top)
- Each withdrawal record should be in a card-like container matching existing component styles
- Status indicators should be color-coded (green for complete, red for failed, amber for processing)
- Maintain the existing purple accent color scheme
- Ensure text contrast and readability

## Important Constraints

- Do not create new CSS files; extend existing modules
- Reuse existing animation and transition styles
- Ensure the implementation is lightweight and doesn't affect performance
- Maintain consistency with the existing UI/UX patterns
- Handle loading and error states appropriately

The ultimate goal is to create a withdrawal history feature that feels like an integral part of the existing application, not a tacked-on addition.

we have withdrawal.json which will contian data like this.

[
  {
    "user_id": "101",
    "withdrawal_id": "W12345",
    "withdrawal_method": "UPI",
    "withdrawal_time": "2025-03-10T14:30:00Z",
    "amount": 1500,
    "status": "complete"
  },
  {
    "user_id": "102",
    "withdrawal_id": "W12346",
    "withdrawal_method": "Crypto",
    "withdrawal_time": "2025-03-09T12:15:00Z",
    "amount": 0.005,
    "status": "failed",
    "reason": "Insufficient balance"
  },
  {
    "user_id": "103",
    "withdrawal_id": "W12347",
    "withdrawal_method": "UPI",
    "withdrawal_time": "2025-03-08T16:45:00Z",
    "amount": 2500,
    "status": "processing"
  },
  {
    "user_id": "104",
    "withdrawal_id": "W12348",
    "withdrawal_method": "Crypto",
    "withdrawal_time": "2025-03-07T10:05:00Z",
    "amount": 0.01,
    "status": "complete"
  },
  {
    "user_id": "105",
    "withdrawal_id": "W12349",
    "withdrawal_method": "UPI",
    "withdrawal_time": "2025-03-06T09:30:00Z",
    "amount": 1000,
    "status": "failed",
    "reason": "Incorrect UPI ID"
  }
]

