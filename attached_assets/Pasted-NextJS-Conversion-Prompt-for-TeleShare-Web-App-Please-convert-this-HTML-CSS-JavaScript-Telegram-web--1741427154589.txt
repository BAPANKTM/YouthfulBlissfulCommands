NextJS Conversion Prompt for TeleShare Web App
Please convert this HTML/CSS/JavaScript Telegram web app into a clean, well-structured Next.js 14 (App Router) project. The conversion should preserve all visual elements, animations, interactions, and functionality present in the original code.
Project Requirements:

Structure & Organization

Use the modern Next.js App Router architecture
Create logical component breakdown with proper file structure
Implement proper CSS modules or styled-components approach
Maintain all existing animations and visual effects


Components Breakdown

Create reusable components for:

Header (with profile)
Greeting banner (with time-based greeting logic)
Balance display
Action buttons
Upload section
Statistics grid and cards
Bottom navigation
Modal/Floater system




State Management

Use React hooks (useState, useEffect) for state management
Implement context for global states if needed
Maintain the existing functionality:

Time-based greeting updates
Modal/floater system
Active tab state in navigation




Styling Approach

Convert existing CSS to either:

CSS Modules (preferred)
Styled Components
TailwindCSS (if you prefer)


Keep all existing animations, gradients, and effects intact
Ensure responsive design across all screen sizes


Directory Structure

Create a logical file structure with:

/app - For main page routes
/app/components - For reusable UI components
/app/context (if needed) - For React Context providers
/app/hooks - For custom hooks (like the greeting time logic)
/app/styles - For global styles or shared themes
/public - For static assets, icons, images




File Naming & Organization

Use descriptive names for all components
Group related components together
Follow NextJS best practices for file naming


Documentation

Create a detailed guide.txt file explaining:

Project structure overview
Component breakdown
State management approach
How to extend/customize components
Styling methodology





Important Notes:

DO NOT add unnecessary comments throughout the code
Maintain a clean, minimalist code structure
Ensure all existing animations and interactions work identically
Preserve all visual styling, shadows, gradients, and effects exactly as shown
Keep file structure intuitive for other developers
The web app should work seamlessly in the Telegram Web App environment

Please make sure the conversion doesn't break any existing functionality, especially the time-based greeting, the modal/floater system, and all animations. The end result should look identical to the original HTML version but with the benefits of Next.js's component-based architecture and improved code organization.