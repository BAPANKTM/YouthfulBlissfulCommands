

# Prompt for Implementing Links History Feature

## Implementation Requirements

Create a links history feature that opens in the existing Floater component when the user clicks a "Links" button. The links view should display all links created by the user with relevant statistics while maintaining the current design system.

## Functional Requirements

1. Add a "Links" button alongside existing action buttons that opens the Floater/modal component
2. Display link records from the provided JSON data (to be stored in `/public/data/links.json`)
3. Show comprehensive statistics for each link:
   - Link title and type (text, file, image)
   - Creation date and time
   - Total clicks lifetime
   - Total downloads lifetime
   - Recent clicks (last 60 minutes)
   - Recent downloads (last 60 minutes)
4. Include appropriate handling for empty states when no links exist

## Technical Guidelines

- **Reuse Existing Components**: 
  - Use the existing Floater component for the modal display
  - Match the existing action button style for the Links button
  - Leverage existing CSS classes when possible

- **Data Management**:
  - Create a utility function to fetch links data
  - Sort records by date (newest first)
  - Format statistics in a user-friendly way

- **UI Elements**:
  - Style link entries consistent with existing card components
  - Use appropriate icons for different link types
  - Include visual indicators for high-performing links

## Visual Guidelines

- The Links button should match other action buttons in style and placement
- Each link record should be in a card-like container matching existing component styles
- Statistics should be clearly presented with appropriate spacing
- Maintain the existing purple accent color scheme
- Ensure text contrast and readability

## Important Constraints

- Do not create new CSS files; extend existing modules
- Reuse existing animation and transition styles
- Ensure the implementation is lightweight and doesn't affect performance
- Maintain consistency with the existing UI/UX patterns
- Handle loading and error states appropriately

## Sample JSON Structure

```json
[
  {
    "link_id": "L12345",
    "user_id": "101",
    "title": "Product Presentation",
    "type": "file",
    "url": "https://teleshare.com/f/product-presentation.pdf",
    "created_at": "2025-03-10T14:30:00Z",
    "clicks": 245,
    "downloads": 87,
    "recent_clicks": 12,
    "recent_downloads": 5
  },
  {
    "link_id": "L12346",
    "user_id": "101",
    "title": "Team Photo",
    "type": "image",
    "url": "https://teleshare.com/i/team-photo.jpg",
    "created_at": "2025-03-09T12:15:00Z",
    "clicks": 178,
    "downloads": 42,
    "recent_clicks": 3,
    "recent_downloads": 1
  },
  {
    "link_id": "L12347",
    "user_id": "101",
    "title": "Meeting Notes",
    "type": "text",
    "url": "https://teleshare.com/t/meeting-notes",
    "created_at": "2025-03-08T16:45:00Z",
    "clicks": 89,
    "downloads": 0,
    "recent_clicks": 0,
    "recent_downloads": 0
  },
  {
    "link_id": "L12348",
    "user_id": "101",
    "title": "Project Roadmap",
    "type": "file",
    "url": "https://teleshare.com/f/project-roadmap.xlsx",
    "created_at": "2025-03-07T10:05:00Z",
    "clicks": 367,
    "downloads": 124,
    "recent_clicks": 21,
    "recent_downloads": 8
  },
  {
    "link_id": "L12349",
    "user_id": "101",
    "title": "Company Logo",
    "type": "image",
    "url": "https://teleshare.com/i/company-logo.png",
    "created_at": "2025-03-06T09:30:00Z",
    "clicks": 523,
    "downloads": 112,
    "recent_clicks": 7,
    "recent_downloads": 2
  }
]
```

The implementation should create a seamless links history feature that integrates perfectly with the existing application design and functionality.
